name: eks_deploy

on:
  workflow_call:

jobs:
  eks_deploy:
    runs-on: ubuntu-latest
    steps:

      - uses: dopplerhq/cli-action@v2

      # GIT BRANCH = DEV: Service doppler secrets set to env for develop
      - name: Login in Doppler, set Doppler env from service project
        if: endsWith(github.ref, '/develop')
        run: |
          doppler secrets download --no-file --format=docker | grep ^HELM_CONFIG_ >> $GITHUB_ENV;
        env:
          DOPPLER_TOKEN: ${{ secrets.SERVICE_DOPPLER_TOKEN_DEV }}

      # GIT BRANCH = MAIN: Service doppler secrets set to env for main
      - name: Login in Doppler, set Doppler env from github action project
        if: endsWith(github.ref, '/main')
        run: |
          doppler secrets download --no-file --format=docker | grep ^HELM_CONFIG_ >> $GITHUB_ENV;
        env:
          DOPPLER_TOKEN: ${{ secrets.SERVICE_DOPPLER_TOKEN_PRD }}

      
      # We have one AWS account for github ci, and there is no differentiation based on env type dev or prd
      - name: AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Extract branch sha name
      - name: Extract branch short sha
        id: git_extract_branch_sha
        shell: bash
        run: |
          echo "REPO_SHA_SHORT=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          echo "Output for sha_short is: ${{ steps.git_extract_branch_sha.outputs.REPO_SHA_SHORT }}"
        
      # Get hostname  
      - name: Get hostname
        id: hostname
        if: env.HELM_CONFIG_SERVICE_SUBDOMAIN_ENABLED != ''
        uses: koslib/helm-eks-action@v1.26.0
        env:
          KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
        with:
          command: kubectl get svc ingress-nginx-controller -n ingress-nginx -o json | jq -r '.status.loadBalancer.ingress[0].hostname'


      # Install python
      - name: Setup python
        if: env.HELM_CONFIG_SERVICE_SUBDOMAIN_ENABLED != ''
        uses: actions/setup-python@v4
        with:
          python-version: 3.8
      - name: Install dependencies
        run: |
          pip install requests

      # Create subdomain
      - name: Create subdomain if service has that settings under Doppler
        id: create_subdomain
        if: env.HELM_CONFIG_SERVICE_SUBDOMAIN_ENABLED != ''
        run: |
          echo "Creating subdomain for service"
          echo "Constructing Ingress settings:"
          INGRESS_SET_STR=""

          if ${{ endsWith(github.ref, '/main')  }} ; then
            echo "Creating subdomain ${{ env.HELM_CONFIG_SERVICE_SUBDOMAIN_PRD }} for service ${{ secrets.SERVICE_NAME }} under Cloudflare "
            INGRESS_SET_STR+=" --set 'ingress.hosts[0].host=${{ env.HELM_CONFIG_SERVICE_SUBDOMAIN_PRD }},ingress.hosts[0].paths[0].path=/,ingress.hosts[0].paths[0].pathType=Prefix'"
          fi

          if ${{ endsWith(github.ref, '/develop')  }} ; then
            echo "Creating subdomain ${{ env.HELM_CONFIG_SERVICE_SUBDOMAIN_DEV }} for service ${{ secrets.SERVICE_NAME }} under Cloudflare "
            INGRESS_SET_STR+=" --set 'ingress.hosts[0].host=${{ env.HELM_CONFIG_SERVICE_SUBDOMAIN_DEV }},ingress.hosts[0].paths[0].path=/,ingress.hosts[0].paths[0].pathType=Prefix'"
          fi

          echo "INGRESS_SET_STR value is: ${INGRESS_SET_STR}"
          echo "INGRESS_SET_ADDON=$(echo $INGRESS_SET_STR)" >>$GITHUB_OUTPUT

          cf_output=$(python cf-utils.py)
          echo "SUBDOMAIN_URL=$(echo -n $cf_output)" >> $GITHUB_OUTPUT

          echo "Subdomain ${cf_output} for service ${{ secrets.SERVICE_NAME }} created."
        env:
          CF_TOKEN: ${{ secrets.CF_TOKEN }}
          CF_EMAIL: ${{ secrets.CF_EMAIL }}
          CF_DOMAIN: ${{ secrets.CF_DOMAIN }}
          SUBDOMAIN: ${{ endsWith(github.ref, '/main') && env.HELM_CONFIG_SERVICE_SUBDOMAIN_PRD || env.HELM_CONFIG_SERVICE_SUBDOMAIN_DEV }}
          IP: ${{ steps.hostname.outputs.response }}


      # Deploying into k8s

      - name: ENV = DEV | Deploy ${{ secrets.SERVICE_NAME }} to kubernetes namespace ${{ secrets.HELM_CONFIG_EKS_NAMESPACE }}
        id: eksdeploy_dev
        if: endsWith(github.ref, '/develop')
        # if: secrets.AWS_EKS_NAMESPACE != '' &&  secrets.SERVICE_NAME != ''
        uses: koslib/helm-eks-action@v1.26.0
        env:
          KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
        with:
          command: helm upgrade ${{ secrets.SERVICE_NAME }} ./helm --install --wait --atomic --namespace=${{ env.HELM_CONFIG_EKS_NAMESPACE }} --create-namespace --set "autoscaling.maxReplicas=${{ env.HELM_CONFIG_SERVICE_MAX_REPLICA || 1 }},imageCredentials.username=${{ secrets.DOCKERHUB_USERNAME }},imageCredentials.password=${{ secrets.DOCKERHUB_TOKEN }},dopplerToken=${{ secrets.SERVICE_DOPPLER_TOKEN_DEV }}" --set "image.repository=${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.SERVICE_NAME }}" --set "image.tag=${{ steps.git_extract_branch_sha.outputs.REPO_SHA_SHORT }}" ${{steps.create_subdomain.outputs.INGRESS_SET_ADDON}}

      - name: ENV = PRD | Deploy ${{ secrets.SERVICE_NAME }} to kubernetes namespace ${{ secrets.HELM_CONFIG_EKS_NAMESPACE }}
        id: eksdeploy_prd
        if: endsWith(github.ref, '/main')
        # if: secrets.AWS_EKS_NAMESPACE != '' &&  secrets.SERVICE_NAME != ''
        uses: koslib/helm-eks-action@v1.26.0
        env:
          KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
        with:
          command: helm upgrade ${{ secrets.SERVICE_NAME }} ./helm --install --wait --atomic --namespace=${{ env.HELM_CONFIG_EKS_NAMESPACE }} --create-namespace --set "autoscaling.maxReplicas=${{ env.HELM_CONFIG_SERVICE_MAX_REPLICA || 1 }},imageCredentials.username=${{ secrets.DOCKERHUB_USERNAME }},imageCredentials.password=${{ secrets.DOCKERHUB_TOKEN }},dopplerToken=${{ secrets.SERVICE_DOPPLER_TOKEN_PRD }}" --set "image.repository=${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.SERVICE_NAME }}" --set "image.tag=${{ steps.git_extract_branch_sha.outputs.REPO_SHA_SHORT }}"  ${{steps.create_subdomain.outputs.INGRESS_SET_ADDON}}